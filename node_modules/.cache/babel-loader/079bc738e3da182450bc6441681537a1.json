{"ast":null,"code":"var _jsxFileName = \"P:\\\\react\\\\image-sensor\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport './App.css';\nimport NavBar from './components/NavBar.jsx';\nimport BreadCrumb from './components/Breadcrumb';\nimport { getImages } from './services/api';\nimport Images from './components/Images';\nimport SnackBar from './components/SnackBar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [data, setData] = useState([]);\n  const [text, setText] = useState('black universe');\n  const [count, setCount] = useState(16);\n  const [open, toggleSnack] = useState(false);\n  useEffect(() => {\n    if (count < 3 || count > 200) {\n      toggleSnack(true);\n      return;\n    }\n\n    toggleSnack(false);\n\n    const getData = async () => {\n      await getImages(text, count).then(response => {\n        setData(response.data.hits);\n      });\n    };\n\n    getData();\n  }, [text, count]);\n\n  const onTextChange = text => {\n    setText(text);\n  };\n\n  const onCountChange = count => {\n    setCount(count);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BreadCrumb, {\n      onTextChange: onTextChange,\n      onCountChange: onCountChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Images, {\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SnackBar, {\n      open: open,\n      toggleSnack: toggleSnack\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"SF4mG7UfjrnLSWPMTevi8sa/ZzE=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["P:/react/image-sensor/src/App.js"],"names":["useEffect","useState","NavBar","BreadCrumb","getImages","Images","SnackBar","App","data","setData","text","setText","count","setCount","open","toggleSnack","getData","then","response","hits","onTextChange","onCountChange"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAO,WAAP;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,SAASC,SAAT,QAA0B,gBAA1B;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,QAAP,MAAqB,uBAArB;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACS,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,gBAAD,CAAhC;AACA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACa,IAAD,EAAOC,WAAP,IAAsBd,QAAQ,CAAC,KAAD,CAApC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAGY,KAAK,GAAG,CAAR,IAAaA,KAAK,GAAG,GAAxB,EAA4B;AAC1BG,MAAAA,WAAW,CAAC,IAAD,CAAX;AACA;AACD;;AACDA,IAAAA,WAAW,CAAC,KAAD,CAAX;;AAEA,UAAMC,OAAO,GAAG,YAAY;AAC1B,YAAMZ,SAAS,CAACM,IAAD,EAAOE,KAAP,CAAT,CAAuBK,IAAvB,CAA4BC,QAAQ,IAAI;AAC5CT,QAAAA,OAAO,CAACS,QAAQ,CAACV,IAAT,CAAcW,IAAf,CAAP;AACD,OAFK,CAAN;AAGD,KAJD;;AAKAH,IAAAA,OAAO;AACR,GAbQ,EAaN,CAACN,IAAD,EAAOE,KAAP,CAbM,CAAT;;AAeA,QAAMQ,YAAY,GAAIV,IAAD,IAAU;AAC7BC,IAAAA,OAAO,CAACD,IAAD,CAAP;AACD,GAFD;;AAIA,QAAMW,aAAa,GAAIT,KAAD,IAAW;AAC/BC,IAAAA,QAAQ,CAACD,KAAD,CAAR;AACD,GAFD;;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,UAAD;AAAY,MAAA,YAAY,EAAEQ,YAA1B;AAAwC,MAAA,aAAa,EAAEC;AAAvD;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,MAAD;AAAQ,MAAA,IAAI,EAAEb;AAAd;AAAA;AAAA;AAAA;AAAA,YAHF,eAIE,QAAC,QAAD;AAAU,MAAA,IAAI,EAAEM,IAAhB;AAAsB,MAAA,WAAW,EAAEC;AAAnC;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;GArCQR,G;;KAAAA,G;AAuCT,eAAeA,GAAf","sourcesContent":["import { useEffect, useState } from 'react';\nimport './App.css';\nimport NavBar from './components/NavBar.jsx';\nimport BreadCrumb from './components/Breadcrumb';\nimport { getImages } from './services/api';\nimport Images from './components/Images';\nimport SnackBar from './components/SnackBar';\n\nfunction App() {\n  const [data, setData] = useState([]);\n  const [text, setText] = useState('black universe');\n  const [count, setCount] = useState(16);\n  const [open, toggleSnack] = useState(false);\n\n  useEffect(() => {\n    if(count < 3 || count > 200){\n      toggleSnack(true);\n      return;\n    }\n    toggleSnack(false);\n\n    const getData = async () => {\n      await getImages(text, count).then(response => {\n        setData(response.data.hits);\n      }); \n    }\n    getData();\n  }, [text, count])\n  \n  const onTextChange = (text) => {\n    setText(text);\n  }\n\n  const onCountChange = (count) => {\n    setCount(count);\n  }\n\n  return (\n    <div className=\"App\">\n      <NavBar/>\n      <BreadCrumb onTextChange={onTextChange} onCountChange={onCountChange}/>\n      <Images data={data}/>\n      <SnackBar open={open} toggleSnack={toggleSnack} />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}